apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name | default "pccs"  }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name | default "pccs"  }}
  serviceName: {{ .Release.Name | default "pccs"  }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name | default "pccs"  }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      securityContext: {{- toYaml .Values.securityContext | nindent 8 }}
      {{- if eq .Values.pccsConfig.storage.dialect "sqlite" }}
      initContainers:
        - name: init-sqlite-db
          image: raissonsouto/sqlite-client:alpine-3.21
          command: ["/bin/sh", "-c"]
          args:
            - |
              if [ ! -f "/initcontainer/{{ .Values.pccsConfig.storage.filename }}" ]; then
                echo "Creating SQLite database: {{ .Values.pccsConfig.storage.filename }}"
                sqlite3 /initcontainer/{{ .Values.pccsConfig.storage.filename }} ".databases"
              else
                echo "SQLite database already exists."
              fi
          volumeMounts:
            - name: pccs-cache
              mountPath: /initcontainer
      {{- end }}
      containers:
        - name: {{ .Release.Name | default "pccs"  }}
          image: {{ .Values.image }}
          ports:
            - containerPort: {{ .Values.service.port }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.startupProbe.path | default "/sgx/certification/v4/rootcacrl" }}
              scheme: HTTPS
              port: {{ .Values.service.port }}
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 30
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path | default "/sgx/certification/v4/rootcacrl" }}
              scheme: HTTPS
              port: {{ .Values.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path | default "/sgx/certification/v4/rootcacrl" }}
              scheme: HTTPS
              port: {{ .Values.service.port }}
            initialDelaySeconds: 15
            periodSeconds: 10
          {{- end }}
          volumeMounts:
            - name: pccs-tls
              mountPath: /opt/intel/pccs/ssl_key
              readOnly: true
            - name: pccs-config
              mountPath: /opt/intel/pccs/config/default.json
              subPath: default.json
          {{- if eq .Values.pccsConfig.storage.dialect "sqlite" }}
            - name: pccs-cache
              mountPath: /opt/intel/pccs/{{ .Values.pccsConfig.storage.filename }}
              subPath: {{ .Values.pccsConfig.storage.filename }}
          {{- end }}
      volumes:
        - name: pccs-tls
          secret:
            secretName: pccs-tls
        - name: pccs-config
          secret:
            secretName: pccs-config
        {{- if eq .Values.pccsConfig.storage.dialect "sqlite" }}
        - name: pccs-cache
          persistentVolumeClaim:
            claimName: pccs-cache
        {{- end }}
  {{- if eq .Values.pccsConfig.storage.dialect "sqlite" }}
  volumeClaimTemplates:
  - metadata:
      name: pccs-cache
    spec:
      accessModes: {{ .Values.persistentVolumeClaim.accessModes | default (list "ReadWriteOnce") | toYaml | nindent 6 }}
      resources:
        requests:
          storage: {{ .Values.persistentVolumeClaim.size | default "1Gi" }}
      storageClassName: {{ .Values.persistentVolumeClaim.storageClassName | default "default" }}
  {{- end }}
